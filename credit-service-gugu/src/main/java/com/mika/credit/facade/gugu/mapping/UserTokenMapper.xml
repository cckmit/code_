<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mika.credit.facade.gugu.dao.UserTokenMapper">
  <resultMap id="BaseResultMap" type="com.mika.credit.facade.gugu.model.UserToken">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="u_id" jdbcType="INTEGER" property="uId" />
    <result column="token" jdbcType="INTEGER" property="token" />
    <result column="last_time" jdbcType="TIMESTAMP" property="lastTime" />
    <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, u_id, token, last_time, expire_time
  </sql>
  <sql id="condition">
    <where>
      <if test="id != null and id != 0">
        and id = #{id,jdbcType=INTEGER}
      </if>
      <if test="uId != null and uId != 0">
        and u_id = #{uId,jdbcType=INTEGER}
      </if>
      <if test="token != null and token != 0">
        and token = #{token,jdbcType=INTEGER}
      </if>
      <if test="lastTime != null">
        and last_time = #{lastTime,jdbcType=TIMESTAMP}
      </if>
      <if test="expireTime != null">
        and expire_time = #{expireTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_token
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="com.mika.credit.facade.gugu.model.UserToken" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_token
    <include refid="condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_token
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.mika.credit.facade.gugu.model.UserToken" useGeneratedKeys="true" keyProperty="id">
    insert into user_token (id, u_id, token, 
      last_time, expire_time)
    values (#{id,jdbcType=INTEGER}, #{uId,jdbcType=INTEGER}, #{token,jdbcType=INTEGER}, 
      #{lastTime,jdbcType=TIMESTAMP}, #{expireTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.mika.credit.facade.gugu.model.UserToken" useGeneratedKeys="true" keyProperty="id">
    insert into user_token
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uId != null">
        u_id,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="lastTime != null">
        last_time,
      </if>
      <if test="expireTime != null">
        expire_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uId != null">
        #{uId,jdbcType=INTEGER},
      </if>
      <if test="token != null">
        #{token,jdbcType=INTEGER},
      </if>
      <if test="lastTime != null">
        #{lastTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mika.credit.facade.gugu.model.UserToken">
    update user_token
    <set>
      <if test="uId != null">
        u_id = #{uId,jdbcType=INTEGER},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=INTEGER},
      </if>
      <if test="lastTime != null">
        last_time = #{lastTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null">
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mika.credit.facade.gugu.model.UserToken">
    update user_token
    set u_id = #{uId,jdbcType=INTEGER},
      token = #{token,jdbcType=INTEGER},
      last_time = #{lastTime,jdbcType=TIMESTAMP},
      expire_time = #{expireTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>