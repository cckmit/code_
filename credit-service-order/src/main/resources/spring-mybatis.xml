<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
						http://www.springframework.org/schema/task
      					http://www.springframework.org/schema/task/spring-task-4.1.xsd
      					http://www.springframework.org/schema/cache
       					http://www.springframework.org/schema/cache/spring-cache.xsd
       					">

	<!-- 定时器配置
     task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小
     task:executor/@queue-capacity：等待执行的任务队列的容量
     task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式

     <task:scheduler id="scheduler" pool-size="10" />
     <task:executor id="executor" keep-alive="3600" pool-size="100-200"
     queue-capacity="500" rejection-policy="CALLER_RUNS" />
     <task:annotation-driven executor="executor" scheduler="scheduler" />
     -->

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${order.jdbc.url}" />
		<property name="username" value="${order.jdbc.username}" />
		<property name="password" value="${order.jdbc.password}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
	</bean>

	<!-- 定义Mybatis的SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/mika/credit/facade/order/mapping/*.xml" />
	</bean>

	<!-- 扫描指定包下面的Mapper，并且自动注入到bean中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mika.credit.facade.order.dao"/>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!--事物的注解驱动-->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="interceptorPointCuts" expression="execution(* com.mika.credit.facade.order.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="add*" rollback-for="Exception"/>
			<tx:method name="save*" rollback-for="Exception"/>
			<tx:method name="edit*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="del*" rollback-for="Exception"/>
			<tx:method name="find*" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!--aop配置,采用cglib代理-->
	<aop:config proxy-target-class="true"/>

	<cache:annotation-driven />

	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">

		<property name="configLocation" value="classpath:ehcache.xml" />

	</bean>

	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="accountCache" />
			</set>
		</property>
	</bean>
</beans>